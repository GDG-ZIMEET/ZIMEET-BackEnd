name: ZI-Meet CI/CD Workflow with Gradle

on:
  pull_request:
    branches:
      - main
      - dev
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  CI:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash

      - name: Create application.yml
        run: |
          cd ./src/main/resources
          echo "${{ secrets.APPLICATION }}" > ./application-prod.yml
        shell: bash

      - name: Build with Gradle without tests
        run: ./gradlew clean bootJar -x test
        shell: bash

      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build Docker image
        run : |
          docker images --filter=reference='${{ secrets.DOCKERHUB_USERNAME }}/gdg-server' --format "→ {{.Repository}}:{{.Tag}} (ID: {{.ID}}, Size: {{.Size}}, Created: {{.CreatedSince}})"
        # run: docker build -f Dockerfile -t ${{ secrets.DOCKERHUB_USERNAME }}/gdg-server .

      - name: Check built Docker image
        run: |
          echo "✅ 현재 빌드된 이미지 목록:"
          docker images

      - name: Push Docker image to DockerHub
        run: |
          echo "🚀 Docker 이미지 DockerHub에 푸시 시작..."
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/gdg-server:latest
          echo "✅ Docker 이미지 푸시 완료!"

  CD:
    needs: CI
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/ZIMEET-backend
            sudo docker-compose down
            if [ "$(sudo docker ps -qa)" ]; then
              sudo docker ps -qa | xargs -r sudo docker rm -f
            fi
            sudo docker rmi $(sudo docker images -q) || true
            
            echo "📥 최신 Docker 이미지 Pull: ${{ secrets.DOCKERHUB_USERNAME }}/gdg-server:latest"
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/gdg-server:latest
            
            echo "🚀 Docker Compose로 컨테이너 재가동"
            sudo docker-compose up --build -d
            
            sudo docker image prune -f