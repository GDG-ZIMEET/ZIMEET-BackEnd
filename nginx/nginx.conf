worker_processes auto;       # Nginx 프로세스 자동화

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    sendfile on;
    keepalive_timeout 65;

    upstream backend_server {     # 업스트림 그룹을 생성하여 docker backend 컨테이너로 요청을 전달
            server backend:8080 max_fails=5 fail_timeout=10s;
    }

    server {
        listen 80;

        location /swagger-ui/ {
            proxy_pass http://backend_server/swagger-ui/;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
        }

        location / {
            proxy_pass http://backend_server;              # docker dackend 컨테이너로 요청 리버스 프록시
            proxy_set_header Host $host;                   # 클라이언트가 요청한 호스트 정보 유지.
            proxy_set_header X-Real-IP $remote_addr;                        # 클라이언트의 실제 IP
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;    # 프록시 서버를 여러 개 거칠 경우, 모든 원본 IP 정보유지.
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;

            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;

            set $allowed_origin '';
            if ($http_origin ~* "^https?://(localhost:3000|zimeetgdg\.web\.app)$") {
                set $allowed_origin $http_origin;
            }

            # cors
            add_header 'Access-Control-Allow-Origin' '$allowed_origin' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            if ($request_method = OPTIONS) {
                add_header 'Access-Control-Allow-Origin' '$allowed_origin' ;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, DELETE, PATCH, PUT, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type';
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Content-Length' 0;
                add_header 'Content-Type' 'text/plain; charset=UTF-8';

                return 204;
            }
        }
    }
}
