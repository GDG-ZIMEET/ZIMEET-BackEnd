worker_processes auto;       # Nginx 프로세스 자동화

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    sendfile on;
    keepalive_timeout 65;

#     # Docker 네트워크의 내부 DNS 기반 로드밸런서
#     resolver 127.0.0.11 valid=10s ipv6=off;
#     upstream backend_server {
#         hash $cookie_refreshToken consistent;
#         hash $remote_addr consistent;  # 쿠키가 없을 경우, 클라이언트 IP 기반으로 고정
#         server backend:8080 max_fails=5 fail_timeout=10s;
#     }

    upstream backend_server {
        server zimeet-backend_backend_1:8080 max_fails=5 fail_timeout=10s;
        server zimeet-backend_backend_2:8080 max_fails=5 fail_timeout=10s;
        server zimeet-backend_backend_3:8080 max_fails=5 fail_timeout=10s;
    }

    server {
        listen 80;
        return 301 https://api.zimeet.store$request_uri;
    }

    server {
        listen 443 ssl;
        server_name api.zimeet.store;

        ssl_certificate /etc/letsencrypt/live/api.zimeet.store/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/api.zimeet.store/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        location /swagger-ui/ {
            proxy_pass http://backend_server/swagger-ui/;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
        }

        location / {
            proxy_pass http://backend_server;              # docker dackend 컨테이너로 요청 리버스 프록시

            proxy_cookie_path / "/; Secure; HttpOnly; SameSite=None";
            proxy_set_header Host $host;                   # 클라이언트가 요청한 호스트 정보 유지.
            proxy_set_header X-Real-IP $remote_addr;                        # 클라이언트의 실제 IP
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;    # 프록시 서버를 여러 개 거칠 경우, 모든 원본 IP 정보유지.
            proxy_set_header X-Forwarded-Proto https;
            proxy_pass_request_headers on;

            # 웹 소켓
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_connect_timeout 5s;
            proxy_send_timeout 100s;
            proxy_read_timeout 86400;          # 요청 처리 타임아웃 (1일)

            proxy_redirect off;


            set $allowed_origin '';
            if ($http_origin ~* "^https?:\/\/(localhost:3000|zimeetgdg\.web\.app)$") {
                set $allowed_origin $http_origin;
            }

            # cors
            add_header 'Access-Control-Allow-Origin' '$allowed_origin' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            if ($request_method = OPTIONS) {
                add_header 'Access-Control-Allow-Origin' '$allowed_origin' ;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, DELETE, PATCH, PUT, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type';
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                add_header 'Content-Length' 0;
                add_header 'Content-Type' 'text/plain; charset=UTF-8';

                return 204;
            }
        }
    }
}
